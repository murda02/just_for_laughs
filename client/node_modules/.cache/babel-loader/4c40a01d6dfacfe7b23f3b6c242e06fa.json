{"ast":null,"code":"var _jsxFileName = \"/home/dave/du/projects/just_for_laughs/client/src/components/Jokes/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport { SAVE_JOKE } from '../../utils/mutations';\nimport { QUERY_JOKES, QUERY_ME } from '../../utils/queries';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseURL = \"https://v2.jokeapi.dev\";\nconst categories = [\"Programming\", \"Misc\", \"Pun\", \"Spooky\", \"Christmas\"];\nconst params = [\"blacklistFlags=nsfw,religious,racist,political,sexist,explicit\"];\n\nconst jokeContainer = () => {\n  _s();\n\n  //   const [result, setResult] = useState({});\n  //   const [search, setSearch] = useState(\"\");\n  const searchJoke = () => {\n    fetch(`${baseURL}/joke/${categories.join(\",\")}?${params.join(\"&\")}`).then(res => setResult(res.data)).catch(err => console.log(err));\n  };\n\n  useEffect(() => {\n    searchJoke(\"Coding\");\n  }, []);\n\n  const handleInputChange = e => setSearch(e.target.value);\n\n  const handleFormSubmit = e => {\n    e.preventDefault();\n    searchJoke(search);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"searchJoke\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(jokeContainer, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nexport default jokeContainer; // from Project 2\n// async function getJokeApi() {\n//     const response = await fetch('https://v2.jokeapi.dev/joke/Programming?blacklistFlags=nsfw,religious,racist,political,sexist,explicit');\n//     var objects = await response.json();\n//     let jokeLabel = document.getElementById(\"joke-label\");\n//     jokeLabel.innerHTML = \"\";\n//     if (objects.type === 'single') {\n//         jokeLabel.appendChild(document.createTextNode(objects.joke));\n//     } else {\n//         jokeLabel.appendChild(document.createTextNode(objects.setup + \" \" + objects.delivery));\n//     }\n// }","map":{"version":3,"sources":["/home/dave/du/projects/just_for_laughs/client/src/components/Jokes/index.js"],"names":["React","useState","Link","useMutation","SAVE_JOKE","QUERY_JOKES","QUERY_ME","baseURL","categories","params","jokeContainer","searchJoke","fetch","join","then","res","setResult","data","catch","err","console","log","useEffect","handleInputChange","e","setSearch","target","value","handleFormSubmit","preventDefault","search"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,qBAAtC;;AAEA,MAAMC,OAAO,GAAG,wBAAhB;AACA,MAAMC,UAAU,GAAG,CAAC,aAAD,EAAgB,MAAhB,EAAwB,KAAxB,EAA+B,QAA/B,EAAyC,WAAzC,CAAnB;AACA,MAAMC,MAAM,GAAG,CACX,gEADW,CAAf;;AAIA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AAC5B;AACA;AAEE,QAAMC,UAAU,GAAG,MAAM;AACvBC,IAAAA,KAAK,CAAE,GAAEL,OAAQ,SAAQC,UAAU,CAACK,IAAX,CAAgB,GAAhB,CAAqB,IAAGJ,MAAM,CAACI,IAAP,CAAY,GAAZ,CAAiB,EAA7D,CAAL,CAECC,IAFD,CAEOC,GAAD,IAASC,SAAS,CAACD,GAAG,CAACE,IAAL,CAFxB,EAGCC,KAHD,CAGQC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAHhB;AAIH,GALC;;AAMAG,EAAAA,SAAS,CAAC,MAAM;AACdX,IAAAA,UAAU,CAAC,QAAD,CAAV;AACD,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMY,iBAAiB,GAAIC,CAAD,IAAOC,SAAS,CAACD,CAAC,CAACE,MAAF,CAASC,KAAV,CAA1C;;AAEA,QAAMC,gBAAgB,GAAIJ,CAAD,IAAO;AAC9BA,IAAAA,CAAC,CAACK,cAAF;AACAlB,IAAAA,UAAU,CAACmB,MAAD,CAAV;AACD,GAHD;;AAKA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CA3BD;;GAAMpB,a;;AA6BN,eAAeA,aAAf,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\n\nimport { SAVE_JOKE } from '../../utils/mutations';\nimport { QUERY_JOKES, QUERY_ME } from '../../utils/queries';\n\nconst baseURL = \"https://v2.jokeapi.dev\";\nconst categories = [\"Programming\", \"Misc\", \"Pun\", \"Spooky\", \"Christmas\"];\nconst params = [\n    \"blacklistFlags=nsfw,religious,racist,political,sexist,explicit\"\n];\n\nconst jokeContainer = () => {\n//   const [result, setResult] = useState({});\n//   const [search, setSearch] = useState(\"\");\n\n  const searchJoke = () => { \n    fetch(`${baseURL}/joke/${categories.join(\",\")}?${params.join(\"&\")}`\n  )\n    .then((res) => setResult(res.data))\n    .catch((err) => console.log(err));\n}\n  useEffect(() => {\n    searchJoke(\"Coding\");\n  }, []);\n\n  const handleInputChange = (e) => setSearch(e.target.value);\n\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n    searchJoke(search);\n  };\n\n  return (\n    <div>\n        searchJoke\n    </div>\n  )\n\n};\n\nexport default jokeContainer\n\n\n// from Project 2\n// async function getJokeApi() {\n//     const response = await fetch('https://v2.jokeapi.dev/joke/Programming?blacklistFlags=nsfw,religious,racist,political,sexist,explicit');\n//     var objects = await response.json();\n//     let jokeLabel = document.getElementById(\"joke-label\");\n//     jokeLabel.innerHTML = \"\";\n//     if (objects.type === 'single') {\n//         jokeLabel.appendChild(document.createTextNode(objects.joke));\n//     } else {\n//         jokeLabel.appendChild(document.createTextNode(objects.setup + \" \" + objects.delivery));\n//     }\n// }"]},"metadata":{},"sourceType":"module"}